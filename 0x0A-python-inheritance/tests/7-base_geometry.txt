The ```BaseGeometry`` module
=============================

Using ``BaseGeometry``:
-----------------------
First import ``BaseGeometry`` from ``base_geometry``:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()

Now use it:

    >>> try:
    ...     print(bg.area())
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    ... 
    [Exception] area() is not implemented

    >>> try:
    ...     print("Rectangle: {} - {}".format(r.width, r.height))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    ... 
    [AttributeError] 'Rectangle' object has no attribute 'width'

    >>> bg.integer_validator("my_int", 12)

    >>> bg.integer_validator("Name", "Daniela")
    Traceback (most recent call last):
        ...
    TypeError: Name must be an integer

    >>> bg.integer_validator("Name", 0)
    Traceback (most recent call last):
        ...
    ValueError: Name must be greater than 0

    >>> bg.integer_validator("Name", -5)
    Traceback (most recent call last):
        ...
    ValueError: Name must be greater than 0

    >>> bg.integer_validator("Name", [1, 2])
    Traceback (most recent call last):
        ...
    TypeError: Name must be an integer

    >>> bg.integer_validator([1, 3], 0)
    Traceback (most recent call last):
        ...
    ValueError: [1, 3] must be greater than 0

    >>> bg.integer_validator()
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> bg.integer_validator(False, True)
    Traceback (most recent call last):
        ...
    TypeError: False must be an integer

    >>> bg.integer_validator("name")
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'